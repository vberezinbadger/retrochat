require('dotenv').config();
const express = require('express');
const path = require('path');

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const NODE_ENV = process.env.NODE_ENV || 'development';

console.log('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
console.log('TELEGRAM_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', !!(TELEGRAM_TOKEN && TELEGRAM_TOKEN !== 'YOUR_BOT_TOKEN_HERE'));
console.log('TELEGRAM_CHAT_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', !!(TELEGRAM_CHAT_ID && TELEGRAM_CHAT_ID !== 'YOUR_CHAT_ID_HERE'));

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
let messages = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
let bot = null;
if (TELEGRAM_TOKEN && TELEGRAM_TOKEN !== 'YOUR_BOT_TOKEN_HERE') {
    try {
        const TelegramBot = require('node-telegram-bot-api');
        
        bot = new TelegramBot(TELEGRAM_TOKEN, { 
            polling: NODE_ENV === 'development'
        });
        
        console.log('‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω (polling=' + (NODE_ENV === 'development') + ')');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
        bot.on('message', (msg) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ Telegram:', {
                chat_id: msg.chat.id,
                expected_chat_id: TELEGRAM_CHAT_ID,
                from: msg.from.first_name,
                text: msg.text
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à —á–∞—Ç –∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
            if (TELEGRAM_CHAT_ID && 
                msg.chat.id.toString() === TELEGRAM_CHAT_ID.toString() && 
                msg.text && 
                msg.text.trim() &&
                !msg.text.startsWith('[WEB]')) { // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                
                const messageData = {
                    nickname: msg.from.first_name || msg.from.username || 'Telegram User',
                    text: msg.text.trim(),
                    timestamp: Date.now(),
                    source: 'telegram'
                };
                
                messages.push(messageData);
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –¥–æ–±–∞–≤–ª–µ–Ω–æ:', messageData);
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                if (messages.length > 100) {
                    messages = messages.slice(-50);
                }
            }
        });
        
        bot.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error.message);
        });
        
        bot.on('polling_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error.message);
    }
} else {
    console.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async function sendToTelegram(nickname, text) {
    if (bot && TELEGRAM_CHAT_ID && TELEGRAM_CHAT_ID !== 'YOUR_CHAT_ID_HERE') {
        try {
            const message = `[WEB] ${nickname}: ${text}`;
            await bot.sendMessage(TELEGRAM_CHAT_ID, message);
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', message);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
            return false;
        }
    }
    return false;
}

// API –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages', (req, res) => {
    const since = parseInt(req.query.since) || 0;
    const limit = parseInt(req.query.limit) || 20;
    
    let recentMessages;
    if (since === 0) {
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        recentMessages = messages.slice(-limit);
    } else {
        // –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        recentMessages = messages.filter(msg => msg.timestamp > since);
    }
    
    console.log(`üìã API /messages: since=${since}, limit=${limit}, –Ω–∞–π–¥–µ–Ω–æ=${recentMessages.length}`);
    res.json(recentMessages);
});

// API –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.post('/api/messages', async (req, res) => {
    const { nickname, text } = req.body;
    
    if (!nickname || !text) {
        console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', req.body);
        return res.status(400).json({ error: 'Nickname and text required' });
    }
    
    const messageData = {
        nickname: nickname.trim(),
        text: text.trim(),
        timestamp: Date.now(),
        source: 'user'
    };
    
    messages.push(messageData);
    console.log('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', messageData);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (messages.length > 100) {
        messages = messages.slice(-50);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramSent = await sendToTelegram(nickname, text);
    
    res.json({ 
        success: true, 
        telegram_sent: telegramSent 
    });
});

// Webhook –¥–ª—è production
app.post('/api/telegram-webhook', (req, res) => {
    const update = req.body;
    console.log('üîó Webhook –ø–æ–ª—É—á–µ–Ω:', update);
    
    if (update.message && TELEGRAM_CHAT_ID && 
        update.message.chat.id.toString() === TELEGRAM_CHAT_ID.toString() && 
        update.message.text &&
        !update.message.text.startsWith('[WEB]')) {
        
        const messageData = {
            nickname: update.message.from.first_name || update.message.from.username || 'Telegram User',
            text: update.message.text.trim(),
            timestamp: Date.now(),
            source: 'telegram'
        };
        
        messages.push(messageData);
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ webhook –¥–æ–±–∞–≤–ª–µ–Ω–æ:', messageData);
        
        if (messages.length > 100) {
            messages = messages.slice(-50);
        }
    }
    
    res.json({ ok: true });
});

// –°—Ç–∞—Ç—É—Å API
app.get('/api/status', (req, res) => {
    res.json({
        telegram_configured: !!(TELEGRAM_TOKEN && TELEGRAM_TOKEN !== 'YOUR_BOT_TOKEN_HERE'),
        chat_configured: !!(TELEGRAM_CHAT_ID && TELEGRAM_CHAT_ID !== 'YOUR_CHAT_ID_HERE'),
        messages_count: messages.length,
        bot_status: bot ? 'connected' : 'disconnected',
        environment: NODE_ENV
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
module.exports = app;

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (require.main === module) {
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT}`);
        
        if (TELEGRAM_TOKEN && TELEGRAM_CHAT_ID) {
            console.log('Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        } else {
            console.log('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ');
        }
    });
}
