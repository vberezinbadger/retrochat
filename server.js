require('dotenv').config();
const express = require('express');
const path = require('path');

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const NODE_ENV = process.env.NODE_ENV || 'development';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!TELEGRAM_TOKEN || TELEGRAM_TOKEN === 'YOUR_BOT_TOKEN_HERE') {
    console.warn('‚ö†Ô∏è  TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    if (NODE_ENV === 'production') {
        console.error('‚ùå –í production —Ä–µ–∂–∏–º–µ TELEGRAM_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!');
    }
}

if (!TELEGRAM_CHAT_ID || TELEGRAM_CHAT_ID === 'YOUR_CHAT_ID_HERE') {
    console.warn('‚ö†Ô∏è  TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    if (NODE_ENV === 'production') {
        console.error('‚ùå –í production —Ä–µ–∂–∏–º–µ TELEGRAM_CHAT_ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è API —Ä–æ—É—Ç–æ–≤)
let bot = null;
if (TELEGRAM_TOKEN && TELEGRAM_TOKEN !== 'YOUR_BOT_TOKEN_HERE') {
    try {
        const TelegramBot = require('node-telegram-bot-api');
        bot = new TelegramBot(TELEGRAM_TOKEN);
        console.log('‚úÖ Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error.message);
    }
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let messages = [];

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(text) {
    if (bot && TELEGRAM_CHAT_ID && TELEGRAM_CHAT_ID !== 'YOUR_CHAT_ID_HERE') {
        try {
            await bot.sendMessage(TELEGRAM_CHAT_ID, text);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
        }
    }
}

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages', (req, res) => {
    const since = parseInt(req.query.since) || 0;
    const recentMessages = messages.filter(msg => msg.timestamp > since);
    res.json(recentMessages);
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.post('/api/messages', async (req, res) => {
    const message = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!message.nickname || !message.text) {
        return res.status(400).json({ error: 'Nickname and text are required' });
    }
    
    const messageData = {
        nickname: message.nickname,
        text: message.text,
        timestamp: Date.now(),
        source: 'user'
    };
    
    messages.push(messageData);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    await sendToTelegram(`üí¨ ${message.nickname}: ${message.text}`);
    
    res.json({ success: true });
});

// Webhook –¥–ª—è Telegram (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram)
app.post('/api/telegram-webhook', (req, res) => {
    const update = req.body;
    
    if (update.message && TELEGRAM_CHAT_ID && update.message.chat.id.toString() === TELEGRAM_CHAT_ID) {
        const messageData = {
            nickname: update.message.from.first_name || update.message.from.username || 'Telegram User',
            text: update.message.text,
            timestamp: Date.now(),
            source: 'telegram'
        };
        
        messages.push(messageData);
    }
    
    res.json({ ok: true });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
app.get('/api/status', (req, res) => {
    res.json({
        telegram_configured: !!(TELEGRAM_TOKEN && TELEGRAM_TOKEN !== 'YOUR_BOT_TOKEN_HERE'),
        chat_configured: !!(TELEGRAM_CHAT_ID && TELEGRAM_CHAT_ID !== 'YOUR_CHAT_ID_HERE'),
        environment: NODE_ENV,
        messages_count: messages.length
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
module.exports = app;

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (require.main === module) {
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
    });
}
