(function() {
    var socket;
    var currentUser = null;
    var isOldBrowser = false;
    var lastMessageTime = 0;
    var pollInterval;
    var isConnected = false;
    var retryCount = 0;
    var maxRetries = 5;
    
    // –î–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    function detectOldBrowser() {
        var ua = navigator.userAgent.toLowerCase();
        isOldBrowser = ua.indexOf('opera mini') > -1 || 
                      ua.indexOf('symbian') > -1 ||
                      ua.indexOf('series60') > -1 ||
                      !document.querySelector ||
                      !window.JSON;
        
        if (isOldBrowser) {
            document.body.className += ' opera-mini';
        }
    }
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    var loginScreen = document.getElementById('loginScreen');
    var chatScreen = document.getElementById('chatScreen');
    var loginForm = document.getElementById('loginForm');
    var nicknameInput = document.getElementById('nicknameInput');
    var messageForm = document.getElementById('messageForm');
    var messageInput = document.getElementById('messageInput');
    var messagesList = document.getElementById('messagesList');
    var userNickname = document.getElementById('userNickname');
    var logoutBtn = document.getElementById('logoutBtn');
    var messagesContainer = document.getElementById('messagesContainer');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
        detectOldBrowser();
        
        // –§–∏–∫—Å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ - –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (loginForm.addEventListener) {
            loginForm.addEventListener('submit', handleLogin, false);
            messageForm.addEventListener('submit', handleSendMessage, false);
            logoutBtn.addEventListener('click', handleLogout, false);
        } else {
            // –î–ª—è IE8 –∏ —Å—Ç–∞—Ä—à–µ
            loginForm.attachEvent('onsubmit', handleLogin);
            messageForm.attachEvent('onsubmit', handleSendMessage);
            logoutBtn.attachEvent('onclick', handleLogout);
        }
        
        // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        if (nicknameInput.focus) {
            setTimeout(function() {
                nicknameInput.focus();
            }, 100);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç
    function handleLogin(e) {
        if (e.preventDefault) {
            e.preventDefault();
        } else {
            e.returnValue = false;
        }
        
        var nickname = nicknameInput.value;
        if (nickname.replace) {
            nickname = nickname.replace(/^\s+|\s+$/g, ''); // trim –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        }
        
        if (nickname.length < 2) {
            alert('–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            return false;
        }
        
        currentUser = nickname;
        userNickname.innerHTML = nickname; // innerHTML –≤–º–µ—Å—Ç–æ textContent
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        connectToServer();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
        loginScreen.className = 'screen hidden';
        chatScreen.className = 'screen';
        
        if (messageInput.focus) {
            setTimeout(function() {
                messageInput.focus();
            }, 100);
        }
        
        return false;
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    function connectToServer() {
        // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        if (isOldBrowser || typeof WebSocket === 'undefined') {
            pollMessages();
            return;
        }
        
        try {
            socket = new WebSocket((window.location.protocol === 'https:' ? 'wss:' : 'ws:') + '//' + window.location.host);
            
            socket.onopen = function() {
                var joinMessage = JSON.stringify({
                    type: 'join',
                    nickname: currentUser
                });
                socket.send(joinMessage);
            };
            
            socket.onmessage = function(event) {
                var data = JSON.parse(event.data);
                displayMessage(data);
            };
            
            socket.onclose = function() {
                setTimeout(connectToServer, 3000);
            };
            
        } catch (error) {
            pollMessages();
        }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    function pollMessages() {
        if (pollInterval) {
            clearInterval(pollInterval);
        }
        
        pollInterval = setInterval(function() {
            var xhr = createXHR();
            if (!xhr) return;
            
            xhr.open('GET', '/api/messages?since=' + lastMessageTime, true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        try {
                            var messages = JSON.parse(xhr.responseText);
                            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messages.length);
                            
                            for (var i = 0; i < messages.length; i++) {
                                displayMessage(messages[i]);
                                if (messages[i].timestamp > lastMessageTime) {
                                    lastMessageTime = messages[i].timestamp;
                                }
                            }
                            
                            isConnected = true;
                            retryCount = 0;
                        } catch (e) {
                            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', e);
                        }
                    } else {
                        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', xhr.status);
                        isConnected = false;
                        retryCount++;
                        
                        if (retryCount >= maxRetries) {
                            showConnectionError();
                        }
                    }
                }
            };
            
            xhr.onerror = function() {
                console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
                isConnected = false;
                retryCount++;
                
                if (retryCount >= maxRetries) {
                    showConnectionError();
                }
            };
            
            xhr.send();
        }, 2000); // –£–º–µ–Ω—å—à–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    function showConnectionError() {
        var errorDiv = document.createElement('div');
        errorDiv.className = 'connection-error';
        errorDiv.innerHTML = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.';
        
        var existingError = document.querySelector('.connection-error');
        if (existingError) {
            existingError.parentNode.removeChild(existingError);
        }
        
        messagesList.appendChild(errorDiv);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ XHR –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    function createXHR() {
        if (window.XMLHttpRequest) {
            return new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            try {
                return new ActiveXObject('Microsoft.XMLHTTP');
            } catch (e) {
                return null;
            }
        }
        return null;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    function handleSendMessage(e) {
        if (e.preventDefault) {
            e.preventDefault();
        } else {
            e.returnValue = false;
        }
        
        var message = messageInput.value;
        if (message.replace) {
            message = message.replace(/^\s+|\s+$/g, '');
        }
        
        if (!message) return false;
        
        var messageData = {
            nickname: currentUser,
            text: message,
            timestamp: new Date().getTime()
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        displayMessage({
            nickname: currentUser,
            text: message,
            timestamp: messageData.timestamp,
            source: 'user'
        });
        
        if (socket && socket.readyState === 1) { // WebSocket.OPEN = 1
            socket.send(JSON.stringify({
                type: 'message',
                nickname: currentUser,
                text: message,
                timestamp: messageData.timestamp
            }));
        } else {
            // Fallback —á–µ—Ä–µ–∑ HTTP
            var xhr = createXHR();
            if (xhr) {
                xhr.open('POST', '/api/messages', true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                        if (xhr.status !== 200) {
                            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', xhr.status);
                            showSendError();
                        }
                    }
                };
                xhr.send(JSON.stringify(messageData));
            }
        }
        
        messageInput.value = '';
        return false;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    function showSendError() {
        var errorDiv = document.createElement('div');
        errorDiv.className = 'send-error';
        errorDiv.innerHTML = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è';
        
        messagesList.appendChild(errorDiv);
        
        setTimeout(function() {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 3000);
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    function displayMessage(data) {
        var messageDiv = document.createElement('div');
        messageDiv.className = 'message ' + (data.source || 'user');
        
        var authorDiv = document.createElement('div');
        authorDiv.className = 'message-author';
        authorDiv.innerHTML = data.nickname;
        
        var textDiv = document.createElement('div');
        textDiv.className = 'message-text';
        textDiv.innerHTML = data.text;
        
        var timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        var time = new Date(data.timestamp);
        var hours = time.getHours();
        var minutes = time.getMinutes();
        if (minutes < 10) minutes = '0' + minutes;
        timeDiv.innerHTML = hours + ':' + minutes;
        
        messageDiv.appendChild(authorDiv);
        messageDiv.appendChild(textDiv);
        messageDiv.appendChild(timeDiv);
        
        messagesList.appendChild(messageDiv);
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        if (messagesContainer.scrollTop !== undefined) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    }
    
    // –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞
    function handleLogout() {
        if (socket && socket.close) {
            socket.close();
        }
        
        if (pollInterval) {
            clearInterval(pollInterval);
        }
        
        currentUser = null;
        messagesList.innerHTML = '';
        nicknameInput.value = '';
        lastMessageTime = 0;
        isConnected = false;
        retryCount = 0;
        
        chatScreen.className = 'screen hidden';
        loginScreen.className = 'screen';
        
        if (nicknameInput.focus) {
            setTimeout(function() {
                nicknameInput.focus();
            }, 100);
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if (document.readyState === 'loading') {
        if (document.addEventListener) {
            document.addEventListener('DOMContentLoaded', init, false);
        } else {
            document.attachEvent('onreadystatechange', function() {
                if (document.readyState === 'complete') {
                    init();
                }
            });
        }
    } else {
        init();
    }
})();